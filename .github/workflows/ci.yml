on:
  pull_request:
  push:
    branches:
      - main

# Workflow to run build checks/tests/lints for each commit/PR
name: build/test
env:
  toolchain: stable
  # Use nightly features for rust fmt
  fmt-toolchain: nightly

# Build check for 64-bit linux
jobs:
  check-linux-amd64:
    name: Check (Linux x64)
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    env:
      # Share cache with other compatible jobs
      cache-id: linux-amd64
      build-target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.toolchain }}
          override: true

      # Cache cargo dependencies (cache based on Cargo.lock)
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ env.cache-id }}-cargo--registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ env.cache-id }}-cargo--index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ env.cache-id }}-cargo--build-target-${{ hashFiles('**/Cargo.lock') }}

      # Same as `cargo build`, but does not perform expensive final codegen
      # https://doc.rust-lang.org/cargo/commands/cargo-check.html
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: >-
            --target ${{ env.build-target }}

  # Runs rustfmt, a code style checker
  fmt:
    name: Rustfmt
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    env:
      # Share cache with other compatible jobs
      cache-id: linux-amd64
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.fmt-toolchain }}
          components: rustfmt
          override: true

      # Cache cargo dependencies
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ env.cache-id }}-cargo--registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ env.cache-id }}-cargo--index-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Runs clippy, a linter
  clippy:
    name: Clippy
    if: "!contains(github.event.head_commit.message, 'skip ci')"
    runs-on: ubuntu-latest
    env:
      # Share cache with other compatible jobs
      cache-id: linux-amd64
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.toolchain }}
          components: clippy
          override: true

      # Cache cargo dependencies (cache based on Cargo.lock)
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ env.cache-id }}-cargo--registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ env.cache-id }}-cargo--index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ env.cache-id }}-cargo--build-target-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

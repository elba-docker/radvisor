on:
  pull_request:
  push:
    branches:
      - master

# Workflow to run build checks/tests/lints for each commit/PR
name: build/test
env:
  toolchain: nightly

# Build check for 64-bit linux
jobs:
  check-linux-amd64:
    name: Check (Linux x64)
    runs-on: ubuntu-latest
    env:
      # Share cache with other compatible jobs
      cache-id: linux-amd64
      build-target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.toolchain }}
          override: true

      # Cache cargo dependencies (cache based on Cargo.lock)
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ env.cache-id }}-cargo--registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ env.cache-id }}-cargo--index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ env.cache-id }}-cargo--build-target-${{ hashFiles('**/Cargo.lock') }}

      # Same as `cargo build`, but does not perform expensive final codegen
      # https://doc.rust-lang.org/cargo/commands/cargo-check.html
      - uses: actions-rs/cargo@v1
        with:
          command: check
          args: >-
            --target ${{ env.build-target }}

  # Build check for 64-bit windows
  check-windows-amd64:
    name: Check (Windows x64)
    runs-on: windows-latest
    env:
      # Share cache with other compatible jobs
      cache-id: windows-amd64
      build-target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v2

      # Use vcpkg to install OpenSSL for Windows builds:
      # https://github.com/sfackler/rust-openssl/issues/1062#issuecomment-489441940
      # https://github.com/Microsoft/vcpkg
      # ? Note: the -static package version is installted in order to statically link later
      - name: Clone and install vcpkg
        run: git clone https://github.com/Microsoft/vcpkg.git && .\vcpkg\bootstrap-vcpkg.bat
        shell: pwsh

      - name: Cache OpenSSL installation
        id: cache-openssl
        uses: actions/cache@v1
        with:
          path: .\vcpkg\installed
          key: ${{ env.cache-id }}-openssl-${{ hashFiles('./vcpkg/ports/openssl/CONTROL') }}
      - name: Install open-ssl
        run: .\vcpkg\vcpkg install openssl:x64-windows-static
        if: steps.cache-openssl.outputs.cache-hit != 'true'

      - name: Install vcpkg integration
        run: .\vcpkg\vcpkg integrate install
        shell: pwsh
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.toolchain }}
          override: true

      # Cache cargo dependencies (cache based on Cargo.lock)
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ env.cache-id }}-cargo--registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ env.cache-id }}-cargo--index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ env.cache-id }}-cargo--build-target-${{ hashFiles('**/Cargo.lock') }}

      # Perform build checks
      - uses: actions-rs/cargo@v1
        with:
          command: build
          # itarget lets us specify in Cargo.toml to disable hyperlocal (which targets unix)
          # Tracking issue: https://github.com/rust-lang/cargo/issues/7914
          args: >-
            -Z features=itarget
            --target ${{ env.build-target }}
        env:
          # Statically link openssl (needs the RUSTFLAGS variable)
          # More info: https://docs.rs/vcpkg/0.2.6/vcpkg/
          OPENSSL_STATIC: 1
          RUSTFLAGS: -Ctarget-feature=+crt-static

  # Run test suite on Linux
  test:
    name: Test Suite (Linux x64)
    runs-on: ubuntu-latest
    env:
      # Share cache with other compatible jobs
      cache-id: linux-amd64
      build-target: x86_64-unknown-linux-gnu
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.toolchain }}
          override: true

      # Cache cargo dependencies (cache based on Cargo.lock)
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ env.cache-id }}-cargo--registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ env.cache-id }}-cargo--index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ env.cache-id }}-cargo--build-target-${{ hashFiles('**/Cargo.lock') }}

      # Same as `cargo build`, but does not perform expensive final codegen
      # https://doc.rust-lang.org/cargo/commands/cargo-check.html
      - uses: actions-rs/cargo@v1
        with:
          command: test
          args: >-
            --target ${{ env.build-target }}

  # Runs rustfmt, a code style checker
  fmt:
    name: Rustfmt
    runs-on: ubuntu-latest
    env:
      # Share cache with other compatible jobs
      cache-id: linux-amd64
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.toolchain }}
          components: rustfmt
          override: true

      # Cache cargo dependencies
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ env.cache-id }}-cargo--registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ env.cache-id }}-cargo--index-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/cargo@v1
        with:
          command: fmt
          args: --all -- --check

  # Runs clippy, a linter
  clippy:
    name: Clippy
    runs-on: ubuntu-latest
    env:
      # Share cache with other compatible jobs
      cache-id: linux-amd64
    steps:
      - uses: actions/checkout@v2
      - uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.toolchain }}
          components: clippy
          override: true

      # Cache cargo dependencies (cache based on Cargo.lock)
      - name: Cache cargo registry
        uses: actions/cache@v1
        with:
          path: ~/.cargo/registry
          key: ${{ env.cache-id }}-cargo--registry-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo index
        uses: actions/cache@v1
        with:
          path: ~/.cargo/git
          key: ${{ env.cache-id }}-cargo--index-${{ hashFiles('**/Cargo.lock') }}
      - name: Cache cargo build
        uses: actions/cache@v1
        with:
          path: target
          key: ${{ env.cache-id }}-cargo--build-target-${{ hashFiles('**/Cargo.lock') }}

      - uses: actions-rs/cargo@v1
        with:
          command: clippy
          args: -- -D warnings

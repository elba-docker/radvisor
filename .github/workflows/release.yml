on:
  push:
    branch: ci-test
    # # Listen for semver-tagged pushes to generate releases
    # tags:
    #   - v[0-9]+.[0-9]+.[0-9]+

# Workflow for creating a new release and attaching clean-built artifacts
name: release
env:
  toolchain: nightly

# ? Note: doesn't currently use a matrix due to each target OS having very
# ?       different dependency installation requirements
jobs:
  # Build for 64-bit linux and add binary as an artifact to release
  linux-amd64:
    name: Publish (linux-amd64)
    runs-on: ubuntu-latest
    env:
      artifact-name: radvisor-linux-amd64
      build-target: x86_64-unknown-linux-gnu
      output-dir: out
      output-path: out/radvisor
    steps:
      - uses: actions/checkout@v2
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.toolchain }}
          override: true

      # Build binary (cleanbuild for release)
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          args: >-
            --release --bins --all
            -Z unstable-options
            --out-dir ${{ env.output-dir }}
            --target ${{ env.build-target }}
      - name: Strip binary
        run: strip ${{ env.output-path }}

      # # Upload artifacts and create new release if needed
      # - name: Upload binaries to release
      #   uses: svenstaro/upload-release-action@v1-release
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: ${{ env.output-path }}
      #     asset_name: ${{ env.artifact-name }}
      #     tag: ${{ github.ref }}
      #     overwrite: true
      # TODO temp
      - run: stat ${{ env.output-path }}
      - run: ${{ env.output-path }} --help
      - run: stat ${{ env.output-path }}-toolbox
      - run: ${{ env.output-path }}-toolbox --help

      # Create package files
      - name: Run toolbox generation
        run: >-
          ${{ env.output-path }}-toolbox
          -v --color=never
          --repo-root .
      # Create .deb
      - name: Install cargo-deb
        uses: actions-rs/cargo@v1
        with:
          command: install
          args: cargo-deb
      - name: Generate deb package with cargo-deb
        uses: actions-rs/cargo@v1
        with:
          command: deb
          args: >-
            --target=${{ env.build-target }}
            --no-build
      # # Upload package artifacts and create new release if needed
      # - name: Upload package to release
      #   uses: svenstaro/upload-release-action@v1-release
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: target/${{ env.build-targets }}/debian/radvisor.deb
      #     asset_name: ${{ env.artifact-name }}.deb
      #     tag: ${{ github.ref }}
      #     overwrite: true

  # Build for 64-bit windows and add .exe as an artifact to release
  windows-amd64:
    name: Publish (windows-amd64)
    runs-on: windows-latest
    env:
      artifact-name: radvisor-windows-amd64
      output-dir: out
      output-path: out/radvisor.exe
      build-target: x86_64-pc-windows-msvc
    steps:
      - uses: actions/checkout@v2
      - name: Clone and install vcpkg
        run: >-
          git clone https://github.com/Microsoft/vcpkg.git &&
          .\vcpkg\bootstrap-vcpkg.bat
        shell: pwsh
      - name: Install open-ssl
        # ? Note: the -static package version is installed in order to
        # ? statically link later
        run: .\vcpkg\vcpkg install openssl:x64-windows-static
      - name: Install vcpkg integration
        run: .\vcpkg\vcpkg integrate install
        shell: pwsh
      - name: Install toolchain
        uses: actions-rs/toolchain@v1
        with:
          profile: minimal
          toolchain: ${{ env.toolchain }}
          override: true

      # Build binary
      - name: Run cargo build
        uses: actions-rs/cargo@v1
        with:
          command: build
          # itarget lets us specify in Cargo.toml to disable hyperlocal
          # (which targets unix).
          # Tracking issue: https://github.com/rust-lang/cargo/issues/7914
          args: >-
            --release --bins
            -Z features=itarget
            -Z unstable-options
            --out-dir ${{ env.output-dir }}
            --target ${{ env.build-target }}
        env:
          # Statically link openssl (needs the RUSTFLAGS variable)
          # More info: https://docs.rs/vcpkg/0.2.6/vcpkg/
          OPENSSL_STATIC: 1
          RUSTFLAGS: -Ctarget-feature=+crt-static

      # # Upload artifacts and create new release if needed
      # - name: Upload binaries to release
      #   uses: svenstaro/upload-release-action@v1-release
      #   with:
      #     repo_token: ${{ secrets.GITHUB_TOKEN }}
      #     file: ${{ env.output-path }}
      #     asset_name: ${{ env.artifact-name }}
      #     tag: ${{ github.ref }}
      #     overwrite: true

      # TODO temp
      - run: ${{ env.output-path }} --help
